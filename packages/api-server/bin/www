#!/usr/bin/env node

// Register module require for path aliases
require('module-alias/register');

/**
 * Module dependencies.
 */
var config = require('../src/config');
var app = require('../src/app');
var database = require('../src/database');
var debug = require('debug')('api-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

Promise.all([
  // Initializing database connection
  database.connect(),

  // Starting express server
  server.listen(port)
]).then(onListening).catch(onError);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {


  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  console.log(`
Database connection estabilshed...
Server has started on ${bind}...
GraphQL playgound URL:  http://localhost:${addr.port}/graphql 
  `)
}
